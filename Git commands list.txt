gitmkdir Git Project
rm Project
rm -rf Project
cd Project/
git init - create repository locally
git remote add origin https://github.com/besteffects/diosoftCourses-Test-automation.git
git pull - download data from repository
git branch - view all local branches
git branch -a - view local/remote branches 
git pull origin master - download data from master into current branch. If current local branch doesn't exist, then
it will be created and called master
git status - view current branch
touch file - create a file
ls - view folder contents
git add description.txt - add a file to repository
git add -A - add all files to git
git commit description.txt -m "Commited description.txt"
gitk - visual representation of git commits
git push origin master - pushes current branch into the remote master
(origin is an alias of a remote repository url)
git checkout -b lesson2 - create a new local branch based on a current branch
git push origin lesson2 - push a new branch (or update) into remote repository
git push origin - merge ALL branches from local machine to remote repository
git checkout master - switch to master branch
git checkout -b some_branch origin/some_branch - start to work with an existing branch
https://eax.me/git-commands/
git clone git@bitbucket.org:afiskon/hs-textgen.git - clone repository from remote machine to local machine
git rm text.txt - remove a file
git branch -d some_branch - remove a branch after merge
git branch -D some_branch - remove a branch
git log - view history
git log --reverse - history in a reverse order
git show d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4 - view changes in a specific commit
git blame description.txt - view who changed a filelast time
git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4 - reset to a commit
git reset --soft d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4 same as previous, but files on disk are unchanged
git mergetool - open a tool for conflict resolution
git clean -f - remove untracked file
git status - current status
git fetch origin - download all branches from origin, but do not merge them into local repository
git fetch origin master - download master branch from origin, and do not merge into a local repository
git --version
git config --global user.name "Vitalii"
git config --global user.email "vitalii@myemail.com"
git help config - read info about config
rm -rf .git - stop git tracking
touch .gitignore - add gitignore file. It is a test file in which we add file that will be ignored
git reset calc.py - remove a file from staging
git diff - shows the changes in the code

git reset --hard origin/master : If your local changes are bad then just remove them or reset your local master to the state on remote 
Branching: https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
To merge hotfix into master:
Check if your local repository is up to date with the latest changes from your remote server: 
git fetch
Once the fetch is completed: git checkout master.
Ensure the master branch has the latest updates by executing: git pull.
Checkout to the branch that should receive the changes, in our case that is master.
git checkout master

git merge hotfix

git commit --amend - change commit message.
1. Press "i" to edit.
2. Press "Esc" to stop editing.
3. :wq - save changes
4. :q! - reject changes.

Create a release:
git tag -a v1.1 -m "release 1.1"
git push origin v1.1

How to merge after black (python formatter) was applied
git checkout my_branch
pip3 install black
black tests/myfolder  # on applied black formatting on my local folder in my local branch
git checkout master  # switched to master locally
git checkout --patch my_branch tests/myfolder/ # instead of git merge, Answer y to all questions and commit

Pull changes from remote repository to local fork
$ cd PROJECT_NAME
$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
$ git fetch upstream

# then: (like "git pull" which is fetch + merge)
$ git merge upstream/master master

# or, better, replay your local work on top of the fetched branch
# like a "git pull --rebase"
$ git rebase upstream/master
